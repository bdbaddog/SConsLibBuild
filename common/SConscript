#!/bin/python
""" SConscript for common module library"""

######################################################
#  SConscript file for the common module library
######################################################
import os
import sys
import fnmatch

Import('*')

######################################################
#  Retrieve list of files that need to be compiled
######################################################
srcs = []
for file in os.listdir(Dir('.').srcnode().abspath):
   if fnmatch.fnmatch(file, "*.f90"):
      srcs.append(file)

for file in os.listdir(Dir('.').srcnode().abspath):
   if fnmatch.fnmatch(file, "*.c"):
      srcs.append(file)

# The NAG compiler has slightly different usage semantics for
# command line argument processing routines.


os.chdir(os.getcwd())
############################################
#  Customize the construction environment  #
############################################
#
if platform == 'cygwin':

   if fcompiler == 'lahey':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   elif fcompiler == 'ifort12' or fcompiler == 'ifort16' or fcompiler == 'ifort17':
      # Redefine construction environment in order to replace certain posix-specific construction
      # variables with values more appropriate for building on cygwin with Windows tool chain
      env = Environment(options = opts, platform = 'cygwin', tools=['default', 'f90', 'msvc', 'mslink', 'mslib', 'msvs'])

      # Import key environment variables from the users shell environment.  Build will not work properly without them
      for path in path_dict[fcompiler][target_arch] + path_dict[ccompiler][target_arch]:
         command = 'cygpath -u -p "' + path + '"' # transmute the path info from a Windows path to a cygwin path because
         cygwin_path = os.popen(command).read()   # cygwin python will expect to execute compilers using unix path conventions
         env.PrependENVPath('PATH', cygwin_path.rstrip('\n'))

      # Setup the INCLUDE environment variable so that C compiler knows where to go for header files
      for inc in include_dict[ccompiler][target_arch]:
         env.AppendENVPath('INCLUDE', inc, 'ENV', ";")

      for lib in lib_dict[fcompiler][target_arch] + lib_dict[ccompiler][target_arch]:
         env.AppendENVPath('LIB', lib, 'ENV', ";")

      env['OBJPREFIX'] = ''
      env['OBJSUFFIX'] = '.obj'
      env['RANLIBCOM'] = ''
      env['LIBPREFIX'] = ''
      env['LIBSUFFIX'] = '.lib'
      env['LIBS'] = ['winmm', 'wsock32', 'kernel32', 'user32', 'gdi32', 'winspool', 'comdlg32',
                     'advapi32', 'shell32', 'ole32', 'oleaut32', 'uuid', 'odbc32', 'odbccp32'
                    ]

      env['F90'] = 'ifort'
      env['F90COM'] = '$F90 $F90FLAGS $_F90INCFLAGS $_FORTRANMODFLAG /compile_only ${SOURCES.windows} /object:${TARGET.windows}'

      # Default Fortran compiler options
      env['F90FLAGS'] = ['/nologo',
                        ]
      env['FORTRANMODDIRPREFIX'] = '/module:'
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      # Now establish debug/release specific compiler flags and link options
      if buildType == 'debug':
         fortranFlags = ['/debug:full',                 # Enable full debug level information
                         '/check:bounds',               # Generate run-time message when array bounds are exceeded
                         '/check:format',               # Generate run-time message when FORMAT descriptor does not match the
                                                        # data type
                         '/check:pointer',              # Check for disassociated or uninitialized pointers
                                                        # or unallocated allocatable objects
                         '/check:uninit',               # Check for uninitialized variables
                         '/check:output_conversion',    # Generate run-time message when format truncation occurs
                         #'/check:arg_temp_created',
                         '/stand:f95',                  # Generate warning for non-stardard F95 coding
                         '/traceback',                  # Generate traceback information
                         '/warn:interfaces',            # Check interfaces of all subroutines and functions against an external set of
                                                        # interface blocks
                         '/warn:declarations',          # Issue an error message for any undeclared variables
                        # '/warn:unused',                # Enable warnings for a variable that is declared but never used
                         '/Qvc8',                       # Specifies compatibility with MSVS 2005
                         '/MT',                         # Tells linker to search for unresolved references in an optimized
                                                        # multithreaded, static run-time library (LIBCMT.LIB).  This is
                                                        # the same as /threads, /libs:static
                         '/Qdiag-file:${SOURCES.base}.diag',  # write compiler diagnostics to a file
                         '/Qtrapuv',                    # Initialize local variables to a strange value
                         '/Qfp-stack-check',            # Check the stack for consistency
                         '/assume:minus0',              # Allow TRACE to calculate negative zero
                         '/fpe0',                       # Trap all floating point exceptions as errors (except underflows)
                         '/O1',                         # This option tells the compiler to enables optimizations for speed and
                                                        # disables some optimizations that increase code size and affect speed.
                         '/Ob2',                        # Enables inlining of any function at the compiler's discretion.
                         '/fp:source',
                        ]

      elif buildType == 'release':
         fortranFlags = ['/O2',                         # Generate level 2 optimized object files
                         '/MT',                         # Tells linker to search for unresolved references in an optimized
                                                        # multithreaded, static run-time library (LIBCMT.LIB)
                         '/Qdiag-file:${SOURCES.base}.diag',  # write compiler diagnostics to a file
                         '/fp:source',
                        ]
      else:
        print "Not sure what type of build you want"
        print ""
        Exit(1)

      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'g95':
      env = Environment(options = opts, platform = 'cygwin', tools=['default', 'fortran', 'f90'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['CCFLAGS'] = ['-w']
      env['CPPDEFINES'] = ['LINUX']
      env['LIBS'] = ['rpclib']
      env['F90'] = 'g95'
      env['F90FLAGS'] = '-fno-second-underscore'
      env['FORTRANMODDIRPREFIX'] = '-fmod='
      dir = env.Dir("#" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         #fortranFlags = ['-g','-fbounds-check','-ftrace=frame']
         fortranFlags = ['-g',
                        ]
      elif buildType == 'release':
         fortranFlags = ['']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)
#
   elif fcompiler == 'salford':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   else:
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""


elif platform == 'win32':

   if fcompiler == 'cvf':
      env = Environment(options = opts, tools=['default', 'cvf', 'mslink', 'msvc', 'mslib', 'msvs'])
      env.Append(ENV = {'PATH' : os.environ['PATH'], 'INCLUDE' : os.environ['INCLUDE'], 'LIB' : os.environ['LIB']})

      if buildType == 'debug':
         print ""
      elif buildType == 'release':
         print ""
      else:
         print ""

      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""

   elif fcompiler == 'g95':
      env = Environment(options = opts)
      env.Append(ENV = {'PATH' : os.environ['PATH'], 'INCLUDE' : os.environ['INCLUDE'], 'LIB' : os.environ['LIB']})

      if buildType == 'debug':
         print ""
      elif buildType == 'release':
         print ""
      else:
         print ""

      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""

   else:
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""


elif platform == 'linux' or platform == 'linux2':

   if fcompiler == 'lahey':
      env = Environment(options = opts, tools=['fortran', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'lf95'
      env['F90FLAGS'] = '--nli'
      env['FORTRANMODDIRPREFIX'] = '-M '
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['--trap',
                         '--trace',
                         '--chk aesu',
                         '-g'
                        ]
      elif buildType == 'release':
         fortranFlags = ['-O']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'pathscale':
      env = Environment(options = opts, tools=['fortran', 'f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'pathf95'
      env['F90FLAGS'] = ['-m64',
                         '-mcpu=opteron',
                         '-fno-second-underscore',
                        ]
      env['FORTRANMODDIRPREFIX'] = '-module '
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-C',
                         '-g'
                        ]
      elif buildType == 'release':
         fortranFlags = ['-O2']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'nag':
      env = Environment(options = opts, tools=['f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'nagfor'
      env['F90FLAGS'] = ['-maxcontin=75',
                         '-kind=byte'
                        ]
      env['F90PATH'] = ["#" + common_build_dir]
      env['FORTRANMODDIRPREFIX'] = '-mdir '
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-O0',
                         '-gline',
                         '-nan',
                         '-w=all',
                         '-g'
                        ]
      elif buildType == 'release':
         fortranFlags = ['-O2']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'g95':
      env = Environment(options = opts, tools=['fortran', 'f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'g95'
      env['F90FLAGS'] = '-fno-second-underscore'
      env['FORTRANMODDIRPREFIX'] = '-fmod='
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-g','-fbounds-check','-ftrace=frame']
      elif buildType == 'release':
         fortranFlags = ['']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'gfortran':
      env = Environment(options = opts, tools=['fortran', 'f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'gfortran'
      env['F90FLAGS'] = '-fno-second-underscore'
      env['FORTRANMODDIRPREFIX'] = '-J'
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-g','-fbounds-check']
      elif buildType == 'release':
         fortranFlags = ['']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   elif fcompiler == 'intel':
      env = Environment(options = opts, tools=['f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['F90'] = 'ifort'
      env['F90FLAGS'] = ''
      env['FORTRANMODDIRPREFIX'] = ['-module ']
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-g',
                         '-traceback',
                         '-check', 'uninit',
                         '-check', 'bounds',
                         '-no-ftz',
                         '-fpe0',
                        ]
      elif buildType == 'release':
         fortranFlags = ['-O1']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

   else:
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""

elif platform == 'darwin':

   if fcompiler == 'absoft':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   elif fcompiler == 'nag':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   elif fcompiler == 'xlf':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   elif fcompiler == 'g95':
      print "Compiler " + fcompiler + " is currently unsupported on the " + platform + " platform"
      print ""
   elif fcompiler == 'intel':
      env = Environment(options = opts, tools=['f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['RANLIBFLAGS'] = ['-c']
      env['F90'] = 'ifort'
      env['F90FLAGS'] = ''
      env['FORTRANMODDIRPREFIX'] = '-module '
      dir = env.Dir("#/" + common_build_dir)
      env['FORTRANMODDIR'] = dir

      if buildType == 'debug':
         fortranFlags = ['-g',
                         '-traceback',
                         '-check', 'uninit',
                         '-check', 'bounds',
                         '-no-ftz',
                         '-fpe0',
                        ]
      elif buildType == 'release':
         fortranFlags = ['-O1']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)
   elif fcompiler == 'gfortran':
      env = Environment(options = opts, tools=['fortran', 'f90', 'default'])
      env.Append(ENV = {'PATH' : os.environ['PATH']})
      env['CCFLAGS'] = ['-w']
      env['CPPDEFINES'] = ['MACOSX']
      env['F90'] = 'gfortran'
      env.Tool('gnulink')
      env['F90FLAGS'] = '-fno-underscoring'
      env['FORTRANMODDIRPREFIX'] = '-J'
      dir = env.Dir(common_build_dir)
      env['FORTRANMODDIR'] = dir
      env.Append(LIBPATH = common_build_dir)

      if buildType == 'debug':
         fortranFlags = ['-g','-fbounds-check']
         cFlags = ['-g']
      elif buildType == 'release':
         fortranFlags = ['']
         cFlags = ['O2']
      else:
         print "Unsupported buildType = " + buildType
         print ""
         Exit(1)

      env.Append(F90COM = ' 2>&1 | tee ${SOURCES.base}.diag')
      env.Append(F90FLAGS = fortranFlags)

else:
   print "Unsupported platform = " + platform

#  Print out the construction variables for debugging purposes if the user requests it
#if env['verbose'] == 1:
#   build_utils.DumpEnv(env)

# Make the build output prettier for all build environments


######################################################
#  Build the library
######################################################
if (projectType=='shared'):
    common_lib = env.SharedLibrary(target = "common", source = srcs)
else:
    common_lib = env.StaticLibrary(target = "common", source = srcs)

Return("common_lib")
